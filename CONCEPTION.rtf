Projet de Programmation Orientée Objet 2024: Simulation de gaz parfait

Equipe: Armand Le Douarec et Maxime Chatelin

Ecrit le 31/05/2024

Voici ici le fichier CONCEPTION de notre projet, qui regroupe toutes les informations techniques liées à la conception et à l’implémentation de notre programme. Nous détaillerons ici avec précision tout ce que nous avons écrit dans notre code et mérite d’être détaillé. Bonne lecture!

Struct Erreur
Nous avons commencé le projet en définissant une structure pour gérer les erreurs ce qui nous semble être sûrement utile pour le reste de notre projet au cas où une instance particulière, un cas précis pourrait causer des problèmes d’exécution du programme. Nous l’avons simplement définie avec un numéro de code, unique à chaque erreur et un message d’erreur pour bien comprendre d’où vient le throw.

Classe Vecteur3D :
Nous définissons ici notre première classe du projet qui nous servira dans notre espace à trois dimensions où tout se déroulera, nous permettra de caractériser la position, la vitesse et d’autres choses encore.
Nous lui donnons donc simplement trois arguments, trois double pour les coordonnées x, y et z. Nous dotons cette classe des constructeurs classiques, et ajoutons un constructeur avec un bool inutile mais nécessaire pour créer un constructeur constexpr afin de bien définir les vecteurs unitaires que nous définissons explicitement comment vectx, vecty et vectz pour les 3 coordonnées x, y et z.

Nous avons décidé de garder les méthodes faites en semaine 1, mais sont désormais remplacées par des opérateurs, nous vous les spécifions ci-dessous:
- set_coord qui prend une coordonnée et affecte à celle-ci la valeur passée par argument
-set_all_coord qui prend trois nouvelles valeurs pour les affecter aux trois attributs x,y et z de notre Vecteur3D
-afficher est une méthode qui affiche les trois coordonnées du vecteur, c’est comme ceci que nous avons décidé d’afficher un Vecteur3D
- addtiton effectue la somme de deux vecteurs
- soustraction effectuer la différence entre deux vecteurs
- oppose renvoie le Vecteur opposé à notre Vecteur
- muet effectue la multiplication par un scalaire indiqué en argument de la méthode
- prod_vect et prod_scal renvoie respectivement le produit vectoriel et le produit scalaire entre notre Vecteur et le Vecteur autre
- unitaire renvoie le Vecteur unitaire colinéaire à notre vecteur
- floor met chacune des coordonnées du Vecteur à sa partie entière (3.45 devient 3 par exemple)
- norme et norme2 qui renvoient respectivement la norme et la norme au carré du Vecteur
 Enfin, nous avons introduits les opérateurs suivants :
- ==, != qui remplacent la méthode compare, et font des tests d’égalité/inégalité
- +=, -=, *=
- +, - qui font l’addition et la soustraction entre deux Vecteur3D
- la méthode oppose a été remplacée par une surcharge de l'opérateur “-” en interne, ne prenant aucun paramètre
- * qui permet la multiplication d’un vecteur v par un scalaire a, et nous avons implémenté le fait qu’on puisse écrire v*a ou a*v
- ^ qui remplace la méthode prod_vect
- & qui remplace la méthode prod_scal
- << pour afficher un vecteur, appelle la méthode affiche
- ~ qui remplace la méthode unitaire
Pour la méthode unitaire et l’opérateur ~ nous avons fait attention au cas où le vecteur utilisé est le vecteur nul, ce que implique une norme nulle et une division par 0, donc avons décidée throw une Erreur

Classe Dessinable :
C’est une classe sans aucun attribut, et abstraite puisqu’elle contient une méthode virtuelle pure : dessine_sur() qui sera redéfinie dans toutes ses sous-classes instanciables. 
Conceptuellement, nous avons choisi de rendre cette classe abstraite car elle est très générale pour notre programme, elle est parente de toutes les classes qui pourront être dessinées, et caractérise leur essence en tant qu’objet dessinable, mais cette classe ne représente rien de concret en elle-même. La rendre abstraite nous a donc paru évident.
Elle contient un destructeur virtuel pour le polymorphisme
Sa méthode dessine_sur() passe un SupportADessin par référence en argument, elle nous permet donc de faire du polymorphisme. C’est la méthode qui va permettre au sous classe de dessiner sur un SupportADessin.

Classe SupportADessin :
SupportADessin est une classe abstraite, dont toutes les méthodes sont virtuelles pures, car c’est une classe très générale, et pour pouvoir instancier un SupportADessin, il faut savoir quel type de support on va utiliser, graphique ou texte. Cette classe sert à la visualisation du projet, pour pouvoir dessiner chaque objet, comme son nom l’indique.
Elle contient une méthode dessine pour toutes les classes qu’elle doit dessiner, qui passe en argument la classe à dessiner par référence constante. Ces méthodes sont toutes virtuelles pures et seront redéfinies dans les sous classes de SupportADessin
Nous avons supprimé tous les opérateurs d’affectation et les constructeurs de copie et de déplacement pour qu’on ne puisse effectuer aucune copie de SupportADessin, en effet, nous ne saurions pas gérer la copie d’un élément provenant de cette classe.
Attention, nous avons ici dans notre hiérarchie de classes une triple dépendance. En effet, les SupportADessin dessinent des Particule (classe qui sera présentée un peu plus bas), donc doivent savoir ce qu’elles sont, les Particule sont des Dessinable car oui comme nous le verrons, nous souhaitons les dessiner et la classe Dessinable a besoin de connaître la classe SupportADessin dans son unique méthode dessine_sur car elle dessine sur un SupportADessin. C’est pourquoi nous avons indiqué en haut de notre fichier .h de la classe SupportADessin l’ensemble des classes qu’elle pourrait désirer dessiner. Il est donc important, ici, de pré-déclarer l’ensemble des classes que nous dessinerons car c’est l’un des premiers fichiers qui compilera et a tout de même besoin de connaître l’existence des futurs classes pour les dessiner. Il a aussi été nécessaire de éclarer certains types dont nous ferons l’usage: Néon, Argon et Hélium qui sont définis comme des types et non des classes, nous expliquerons plus tard pourquoi.
Classe GenerateurAleatoire :

Cette classe permet uniquement de faire de l’aléatoire dans notre code, ce qui est utilisé lors de l’initialisation de particules et lors des chocs entre les particules. Pour cette classe, nous n’avons fait que suivre les demandes du professeur qui nous a indiqué précisément comment la créer.

Nous avons un constructeur qui prend un unsigned int en argument, qui est une graine et est par défaut générée aléatoirement.

Les deux méthodes uniforme et gaullienne font un tirage aléatoire, uniforme pour la première et gaussien pour la seconde.

Classe Particule (Astre pour le Solar system):
La classe Particule est une sous classe de Dessinable car on souhaite pouvoir dessiner les particules sur notre interface textuelle ou graphique. La classe Particule possède des attributs qui seront utiles à ses sous classes ainsi que des constructeurs/destructeurs et de nombreuses méthodes. Ses attributs sont :
- Un Vecteur3D pos qui représente la position de la Particule ainsi qu’un Vecteur3D v qui lui représente sa vitesse
- Un double m qui donne la masse de la Particule et restera constant tout au long du programme
- Un string nom qui donne le nom à la Particule, qui lui aussi restera constant
- Plusieurs attributs de classe : 
	1. Un int nb_particules qui compte le nombre de particules présentes dans le système, nous pensions beaucoup utiliser cet attribut de classe mais finalement il servira surtout à donner un nom à une particule en lui attribuant un numéro
	2. Un booléen affichageTrace et un autre booléen affichageCouleur, deux attributs de classe qui seront utiles pour l’interface graphique et pour choisir si l’on veut afficher ou non les traces des particules traçables ainsi que la couleur des particules selon leur vitesse.
Ensuite, pour les constructeurs, nous avons un constructeur prenant en argument deux Vecteur3D et un double qui initialisent la position, la vitesse et la masse. De plus, nous donnons un nom par défaut à la particule qui est son numéro d’apparition et incrémente le compteur de particules de 1. Nous avons aussi un constructeur par défaut qui appelle constructeur ci-dessus, mais avec un position initiale à (0,0,0) et une vitesse initiale à (1,1,1) ainsi qu’une masse de 1. Enfin, nous avons un constructeur de copie assez classique ainsi qu’un destructeur virtuel qui décrémente le compteur et permet d’effectuer correctement le polymorphisme.
Ses méthodes sont:
Nous avons une méthode init permettant de tirer aléatoirement une position et une vitesse de la particule en fonction de la taille de l’enceinte dans laquelle elle se trouve, d’un Generateur Aleatoire et de la température. Le tirage des vitesses se fait selon la loi de distribution de vitesses de Maxwell.
Cette méthode possède une méthode intermédiaire tirage_gauss qui effectue le tirage pour une coordonnée de la vitesse selon la formule de Maxwell.
Nous avons doté cette classe de plusieurs getters:
getPos() pour la position pos
getV() pour la vitesse v
getCouleur() pour l'affichageCouleur
getTrace() pour affichageTrace
Ainsi que deux setters pour affichageTrace et l'affichageCouleur. Ils doivent être laissés public pour être manipulé depuis GLWidget.
Une méthode affiche_nom() virtuelle qui affiche le type de la particule.
Nous avons déclaré 3 méthodes virtuelles, inutiles pour la classe Particule car elles sont propres à ses sous-classes mais doivent appartenir à la classe Particule pour le polymorphisme: getKase(),set_kase(...) et getMemoire() qui throw une erreur si jamais elles sont appelées par une particule qui n’en ont pas besoin.
Une méthode bool proximité(...) qui sert uniquement au premier modèle de collision, qui teste si deux particules se situent à une distance inférieure à un pas d’espace fixé.
La méthode affiche() fait appel à affiche_nom() et affiche simplement une  particule à l’aide de son type, sa position, sa vitesse et sa masse.
La méthode évolue() virtuelle actualise la position en fonction d’un pas de temps, de la vitesse et position de la particule. 
La méthode rencontre_particule() qui tire aléatoirement un vecteur vitesse pour les deux particules après le choc. Si c’est le tout premier choc, comme demandé dans l’exercice P9, l’azimut et le zénith de ce choc sont fixés.
Les méthodes surface(...) et rencontre_paroi(...)  qui permettent à la particule de rester à l’intérieur de l’enceinte à laquelle elle appartient. La méthode rencontre_paroi() fait appel à la méthode surface en fonction de chaque dimension de l’enceinte. La méthode surface() en fonction de la coordonnée choisie, crée le vecteur unitaire axe correspondant à la coordonnée(Ox, Oy ou Oz) et les faces de l’enceinte correspondant à cette coordonnée. Les opérations qui suivent sont faites pour prendre le symétrique de la position et la vitesse par rapport à la face de l’enceinte qui a été dépassée par la particule.
Les méthodes copie(), copie_intelligente(), copie_traçable() et copie_TI() qui permettent le polymorphisme copient l’instance courante en un unique_ptr de Particule, Intelligente, Traçable ou TI, classes qui seront décrites juste en dessous.
Nous avons également défini un opérateur d’affichage classique <<.
Enfin, la méthode Newton(...) qui s'applique automatiquement pour mettre à jour l'accélération de chaque astre dans le système en fonction de la position des autres astres (Force gravitationnelle).
Pour la classe Astre (de Solar_system), les mêmes méthodes ont été implémentées et une nouvelle a été rajoutée :
La méthode sat(...) qui permet dé directement ajouter un satellite à un astre déjà présent dans le système, en orbite avec pour paramètre le rayon de l'orbite du satellite. Ainsi, la vitesse de l'astre sur l'orbite n'est pas un paramètre que l'on peut choisir mais qu'il faut calculer à partir du rayon d'orbite choisi.

Sous classes de particule:

Les premières sous classes de Particule sont Intelligente et Traçable:
Une particule intelligente est propre au système intelligent (décrit plus tard). Elle a la particularité de connaître sa position dans l’enceinte du système à l’aide de coordonnées qui correspondent au numéro de la “case” à laquelle elle appartient. Cette information se trouve dans l’attribut kase qui est un array de unsigned int de taille 3. En effet, un système intelligent voit son enceinte partitionner en plusieurs cases. Pour réaliser le deuxième modèle de collision avec une complexité effective, il est nécessaire que le système ait conscience des cases qu’il possède et de ce qu’elles contiennent. Cette sous-classe possède donc un getter et un setter pour cet attribut afin de le manipuler correctement depuis la méthode évolue de Système. Ses constructeurs initient l’attribut kase sans information.
Une particule Traçable connaît ses anciennes positions. Elle est donc dotée d’une liste doublement chaînée  de Vecteur3D pour mémoriser ces anciennes positions nommée mémoire. Elle possède un getter pour cet attribut qui nous permettra de tracer la trace de cette particule sur OpenGL ainsi qu’une méthode évolue enrichie qui actualise la position de la particule ET qui enregistre sa précédente position dans le tableau en effectuant un push(). Cette classe possède un static permettant de limiter la taille de la trace. Ce static est nommé taille_trace et définit la taille maximale de la list memoire. Une fois la taille atteinte, au lieu de simplement push() la nouvelle position de la particule à chaque déplacement on retire le premier élément de la list à l’aide la méthode  pop().
Une autre sous-classe de Particule a été conçue mais ne sera pas utilisée par les sous classes Neon et Argon est la sous-classe TI qui récupère toutes les propriétés des sous-classes Intelligente et Traçable à l’aide du mot-clé using.

Un modèle de sous classe de Particule, le template Particule_spe:
La sous-classe de Particule la plus difficile à créer a été en réalité un modèle de classe, un template appelé Particule_spe. En effet, ce template a principalement été conçu pour éviter le copier-coller qui aurait été causé lors de la création de simples sous-classes comme Néon, Argon et Hélium. Ce modèle de classe généralise ainsi les types de Particule que l’on souhaiterait utiliser.
Pour créer ce modèle de classe, il a fallu créer des types pour faciliter la compréhension du programme. Pour se faire, les enum Hélium, Néon et Argon ont été créés. Ces nouveaux types sont vides et ont été créés dans le seul but d’être des types afin de pouvoir être utilisés comme modèle du template Particule_spe.
Ce template ne possède aucun nouvel attribut mais “fixe” la masse de la particule instanciée au dépend de son type. On comprend donc qu’on ne peut pas créer n’importe quel type de Particule_spe. Ces dernières doivent être un Néon, Argon ou Hélium, types auxquels on a associé une masse et une méthode affiche_nom() essentielle pour leur affichage. Nous appellerons ces types les types de référence.

On a donc enrichi ce modèle à l’aide d’une méthode de classe getMass() qui est essentielle dans la construction de Particule_spe. La masse de la particule_spe de type TYPE est déterminée par la spécialisation de getMass().  En effet, le static getMass() throw une erreur si la particule_spe que l’on tente d’instancier n’a pas de type de référence comme Argon, Hélium ou Néon. En revanche, si la particule instanciée est de l’un de ces trois types, alors, lors de l’appel au constructeur, on fait appel au static getMass() de ce type qui a été spécialisé pour renvoyer la masse d’une particule de ce type. Cette méthode est un static car elle est partagée par toutes les instances de Particule_spe d’un type de référence. Nous avons préféré en faire une méthode plutôt qu’un attribut car nous savons spécialisé les méthodes d’un modèle de classe.
Il en est de même pour la méthode affiche_nom() qui throw une erreur si elle est appelée par une particule_spe d’un type quelconque et affiche le nom correct d’une particule si son type est un type de référence.
Ce modèle de sous-classe est dotée de méthodes  nécessaires à la conception de collections hétérogènes, à l’aide des méthodes copie(), copie_intelliegente(), copie_Traçable et copie_TI() qui, respectivement, créé un unique_ptr de Particule_spe, de Particule_spe_Intelligent, de Particule_spe_Traçable et de Particule_spe_TI à partir d’une particule_spe. Ces méthodes permettent le polymorphisme et conservent l’état de la particule copiée.
Nous avons dans le fichier Particule.cc déclaré les classes nécessaires de ce modèle.
Enfin, des sous-classes de ce modèle ont été créées. Ces sous-classes héritent aussi d'autres sous-classes de Particule. Il est donc nécessaire de déclarer la classe Particule comme virtuelle. Les sous-classes sont:
Particule_spe_Intelligent: qui hérite de la sous-classe Particule_spe et de la sous-classe Intelligente
Particule_spe_Traçable: qui hérite de la sous-classe Particule_spe et de la sous-classe Traçable
Particule_spe_TI: qui hérite des Particule_spe_Tracble et de la sous-classe Intelligible. Nous avons choisi de la faire hériter de la sorte et non de la sous-classe TI pour hériter de la méthode dessine_sur() de Particule_spe_tracable.
Malgré la généralisation de cette classe, deux grandes difficultés ont été rencontrées dans les méthodes dessine_sur() et dans le choix de l’emplacement des prototypes et définitions de ce modèle de classe. En effet, il n’a pas été possible de généraliser la méthode dessine_sur() pour les particule_spe et a dû être spécialisé pour chaque type de référence. Et l’utilisation de template en compilation séparée est complexe car, dans la majorité des cas, l’intégralité des définitions et prototypes doivent se trouver dans le fichier .h . Il a cependant tout de même été possible de placer les définitions dans le .cc ce qui nous a permis d'éviter la duplication de code.

Classe Systeme :
Un système est défini par les attributs suivants:
Un tableau de unique_ptr de particules composants, tableau de pointeurs nécessaire au polymorphisme.
Une Enceinte enceinte ;
Un double epsilon qui représente le pas d’espace;
Un GenerateurAleatoire tirage;
Un double température constant;
Un bool premier_tirage;
Un système simple effectue le premier modèle de collision.
Les constructeurs de Systeme sont simples et les valeurs par défaut sont de 273.15 pour la température, de 0 pour la graine et de 1 pour le pas d’espace.  L’attribut composants est toujours initialisé vide.
Ce sont les méthodes ajoute et ajoute_traçable qui vont remplir ce tableau. Elles prennent un bool aléatoire qui est vrai par défaut pour savoir si on veut que les position et vitesse de  la particule ajoutée soit tirée aléatoirement. Lorsqu’on ajoute une particule traçable on effectue une copie_traçable de la particule donnée.
Les constructeurs de copie de Systeme ont été supprimé et son destructeur a été déclaré virtuel au cas où on compte pointer sur un système pour faire du polymorphisme.
La méthode supprimeParticule() vide le tableau composant. L’utilisation de unique_ptr permet de laisser les éléments de composants se supprimer automatiquement.
Pour afficher un système on affiche tous les éléments du système, c’est-à-dire les particules qui le composent à l’aide de la méthode affiche().
Un système est doté  du getter getComposant() qui récupère les positions de la première particule du système, cette méthode sera utile pour l’extension qui place la caméra sur une particule.
Un système est doté des setters changeCouleur() et changeAffichage() qui modifient les static bool de la classe Particule.
Les dernières méthodes à décrire pour un système simple sont les méthodes evolue() et evolue_bis() qui actualisent l’état du système et peuvent afficher des informations sur les évènement au sein du système.
Tout d’abord la méthode evolue_bis() qui prend en paramètre un tableau de tableau de unsigned int. Un tableau de unsigned int représente un choc et le tableau de ces tableaux représente tous les chocs. Les unsigned int contenu dans un choc correspondent à l’index des particules impliqués dans le choc, c’est leur index dans le tableau composants. 
Pour chaque choc, on prend la dernière particule du choc (particule 1) et on tire aléatoirement une particule parmi les restantes (particule 2). On crée la variable “choisie” qui correspond à l’index de la particule tirée aléatoirement dans le tableau d’un choc.
Puis on réalise le choc à l’aide de la méthode rencontre_particule() de la particule 1 qui prend en paramètre la particule 2. Si c’est le tout premier choc alors premier_tirage devient true et ce choc est fixé.
Pour afficher les informations du choc on utilise les ostringstream qui effectuent une combinaison idéale d’un string et d’un ostream. Pour chaque choc, on dessine le string du choc, donc on affiche les informations du choc avant et après.
La méthode évolue() est en fait ce qui va différencier les modèles de collision. Elle correspond à la construction de ce tableau de chocs. Pour un système simple, on utilise les méthodes évolue() et rencontre_paroi() de chaque particule pour actualiser leur position. On crée le tableau de chocs, vide pour l’instant. Puis, pour chaque particule, on associe un tableau de particules candidates pour un choc. Par conséquent, on refait une boucle pour regarder si les particules sont deux à deux assez proches pour un choc. Deux particules sont assez proches pour un choc si la méthode proximité() appliquée à ces particules retourne true. On évite d’ailleurs d’avoir deux fois le même choc si chaque particule ne regarde uniquement les particules ayant un plus petit index qu’elle. Enfin, si le tableau associé à une particule est strictement plus grand que 1 (il doit y avoir au moins deux particules pour qu’il y ait un choc) alors on ajoute ce tableau au tableau des chocs. Puis une fois toute la boucle terminée, on appelle la méthode evolue_bis().
Nous avons utilisés des ostringstream qui est un ostream qui peut après être converti en string. Cela permet plus simplement d’écrire ce que l’on veut avec l’utilisation des << et permet de faire des retours à la ligne. Pour convertir ce ostream en string, il suffit simplement d’utiliser la fonction str().


Une sous-classe de Systeme: Systeme_intelligent:
Un système intelligent est doté d'un attribut supplémentaire, des cases. Ces cases partitionnent l’enceinte du système. Le nombre de cases dépend du rapport des dimensions de l’enceinte par le pas d’espace choisi à l’instanciation d’un Système. De plus, les particules d’un système intelligent sont intelligentes, elles ont conscience des cases auxquelles elles appartiennent.
On supprime les constructeurs de copie à nouveau et les constructeurs de système intelligent sont similaires à ceux de système puisque les cases de système intelligent sont initialement vides.
Lorsqu’on ajoute une particule à un système intelligent, on effectue à présent une copie intelligente ou copie_TI(). De plus, on met à jour les cases du système intelligent.
Enfin, la différence avec Système est surtout marquée par la nouvelle méthode évolue():
Pour chaque particule du système:
On enregistre son ancienne position et son ancienne case. On aurait pu directement déduire la case à partir de la position. Mais c’est plus simple si on enregistre simplement, les deux données)
on la fait évoluer et on applique la méthode rencontre_paroi() comme dans le premier modèle.
Puis on actualise les cases, c’est-à-dire les index qu’elles contiennent. Donc, si la particule n’est plus au même endroit, on la supprime de son ancienne case pour ensuite l’ajouter ailleurs à l’aide de la méthode erase(). La construction du tableau de chocs est alors simple:
On ajoute au tableau de chocs (le double tableau) les cases qui contiennent plus de un index (donc au moins deux particules).
Une fois, toutes les cases, qui satisfont cette propriété, ajoutées. On appelle la méthode evolue_bis().

Classe Enceinte : 
La classe Enceinte représente ce qui délimitera notre système. Nous souhaitons dessiner l’enceinte, et avons donc fait de cette classe une sous classe de Dessinable. Nous avons décidé de faire pour enceinte un pavé droit, donc nous lui donnons trois attributs hauteur, largeur et profondeur qui sont des double. Ce sont ses seules caractéristiques. Nous avons ajouté les constructeurs suivants : 
- un prenant trois arguments, trois double pour les trois composantes de l’enceinte
- un par défaut, appelant le constructeur ci-dessus en attribuant la valeur 20 aux trois composantes
Nous avons laissé le destructeur par défaut, et avons ajouté trois getters pour les trois attributs de l’enceinte. Pour pouvoir instancier une enceinte, nous redéfinissons la méthode dessine_sur, qui simplement demande au support de dessiner l’instance courante de l’enceinte. 
Nous avons décidé de définir un opérateur d’affichage pour l’enceinte afin de dessiner une enceinte en version texte, car nous avons vu que pour dessiner un système, nous avons choisi de dessiner l’enceinte puis de dessiner l’ensemble des particules dans le système. En version texte, nous expliquerons que pour dessiner un objet sur l’interface texte, nous affichons simplement l’objet avec l’opérateur <<, néanmoins, sur texte nous ne souhaitions pas dessiner l’enceinte donc avons décidé que l’opérateur << affichant l’enceinte ne ferait rien d’autre que retourner l’ostream passé en argument.
Classe TextViewer :
La classe TextViewer est une sous classe de SupportADessin, c’est une des deux sous classes de SupportADessin, et ici incarne le support texte sur lequel il est possible de dessiner le système. Cette classe possède un unique attribut, un ostream sur lequel on va écrire notre message texte représentant le dessin des objets que l’on veut dessiner. Nous passons cet ostream par référence pour le modifier directement et ne pas le copier.
Nous avons un unique constructeur pour la classe TextViewer qui prend un ostream par référence, encore une fois pour le modifier et pas modifier une copie de celui-ci, et par défaut cet ostream est std::cout, la sortie standard sur la console, ce qui facilite l’initialisation d’un TextViewer car la plupart du temps on souhaite simplement écrire sur cette console. Le destructeur est celui fourni par défaut car nous ne voyions pas le besoin d’en faire un spécifique.
On a aussi défini les méthodes dessine prenant en argument l’objet que l’on veut dessiner, nous arrivons avec plusieurs méthodes dessine prenant tous les objets que nous voudrions à un moment ou à un autre dessiner. La liste de ces objets est :
- Une particule, ce qui peut paraître évident, c’est tout le but du projet.
- Une enceinte, ici en version texte nous ne la dessinons pas mais il est tout de même nécessaire de définir cette méthode car elle a été ajoutée dans la classe SupportADessin en tant que méthode virtuelle pure. Nous avons créé une méthode dessine(Enceinte const&) dans la classe SupportADessin car contrairement à la version texte, en version graphique, il sera impératif de dessiner l’enceinte pour bien visualiser les particules et leurs interactions avec les parois.
- Un string, car dans la méthode evolue_bis et la méthode dessine_sur du système, on souhaitait afficher sur l’interface texte, donc notre TextViewer les chocs entre les particules ou bien si le système était vide, et donc nous devions dessiner des string sur ce TextViewer.  Pour dessiner ces string nous les avons simplement sortis sur l’ostream de la classe TextViewer.
- Les sous classes de Particule, qu’elles soient traçables ou non, que nous représentons sur le TextViewer aussi juste en utilisant l’opérateur << pour les afficher.

Nous allons maintenant parler en détail de la partie graphique et de ce que nous avons utilisé pour la faire.
Il est important de noter que notre partie graphique est fondée en partie sur une base fournie par le professeur, notamment certaines méthodes particulières et tous les shaders et fichiers .glsl que nous utilisons.

Classe GLSphere:
Cette classe fait partie des informations fournies par le professeur pour faciliter la partie graphique.
Pour résumer, cette classe représente une sphère que nous pouvons dessiner à l’aide de la méthode draw().

Classe VueOpenGL :
Cette classe hérite de la super classe SupportADessin, et a pour effet d’être le support à dessin graphique. La classe VueOpenGL possède les attributs suivants :
- un shader qui nous a été fourni
- un GLSphere qui servira pour le dessin de sphères
- un QMatrix4x4 qui représente une caméra 
De nombreuses méthodes nous ont été offertes pour cette classe, notamment les méthodes rotateurs et transat, qui permettent de déplacer un QMatrix4x4, les méthodes d’initialisation du VueOpenGL que sont initializePosition et init qui mettent en place les shader, créent dans la fenêtre la profondeur, la caméra, finalement tout ce qui fait du VueOpenGL une interface graphique.
Nous avons ajouté la méthode changeCamera qui déplace la caméra sur la première particule du système et l’accroche à celle-ci. Nous avons ici utilisé la méthode lookAt de la bibliothèque QMatrix4x4 afin de correctement manipuler la caméra en lui indiquant la position de la particule et là où la particule va.
Nous avons décidé de ne pas dessiner les string sur VueOpenGL car il servaient surtout à dire lorsqu’il y avait un choc ou si le système est vide, mais cela est déjà clairement visible simplement avec le dessin de l’enceinte et des particules.
Cette classe, héritant de SupportADessin, doit définir les méthodes dessine pour chacun des objets à dessiner. Pour ce faire, nous avons décidé de faire trois méthodes méthodes auxiliaires dessine_partie1, dessine_partie2 et dessine prenant en argument une particule par référence constante et trois double, qui permettent d’écrire les méthodes dessine sans faire de copié collé. Nous avons donc mis ces méthodes en private car elles ne seront utilisées que par les méthodes dessine qui sont des méthodes de VueOpenGL. Ensuite, nous avons aussi défini des méthodes utilitaires permettant de dessiner des objets que l’on pourra retrouver plusieurs fois, comme par exemple un cube, une sphère ou la trace d’une matrice. Nous avons aussi défini la méthode dessineEnceinte que nous avons jugé utile de définir afin de dessiner plus simplement l’enceinte du système. Enfin, pour dessiner une particule, nous avons décidé de ne rien faire car elle ne représente un atome ou une molécule concrète, mais pour le reste des sous classes de Particule, nous avons utilisé les méthodes intermédiaires avec des couleurs spécifiques à chacun des éléments chimiques.


Classe GLWidget:
Cette classe est destinée à créer une fenêtre sur laquelle on aura notre interface graphique, et donc permet de modéliser notre système. La classe hérite de QOpenGLWidget, une classe pour laquelle on va redéfinir les évènements.
Cette classe possède plusieurs attributs :
-	Possiblement le plus important des attributs, ce que l’on veut dessiner, le système. Nous avons utilisé pour attribut un Systeme_intelligent car il a été construit pour être meilleur en termes de complexité que qu’un Systeme.
-	Un VueOpenGL vue, qui est un SupportADessin que l’on devra donner au système pour qu’il puisse se dessiner sur ce support 
-	Un QElapsedTimer qui assure le bon déroulement de l’évolution du système ainsi qu’un int représentant un timer. Ces attributs nous ont été donné dans l’introduction au graphisme
-	Un booléen AfficheCamera qui change si oui ou non la caméra est fixée sur le premier composant du système ou bien si elle est déplaçable
-	Un int vitesse_simulation qui modifie la vitesse de la simulation selon sa valeur
Nous avons un seul constructeur pour cette classe, qui prend en paramètre les paramètres d’un Systeme, ainsi qu’un pointeur sur un QWidget qui vaut par défaut le pointeur nul et appelle le constructeur de la super classe QOpenGLWidget. De plus, on initialise le booléen affichecamera à false et la vitesse de la simulation à 10 pour avoir la caméra globale et la vitesse standard au début.
Nous ajoutons les méthodes ajouteParticule et ajouteParticule_tracable qui appellent simplement les méthodes de même nom du système de notre GLWidget.
Nous créons la méthode pause qui met la simulation en pause si elle ne l’est pas et la relance si elle est en pause.
Et enfin, nous redéfinissons les méthodes virtuelles initializeGL, resizeGL, paintGL, keyPressEvent et timerEvent, qui avaient été offertes par le tutoriel mais doivent être modifiées pour s’adapter à notre code :
-	initializeGL initialise juste le support ainsi que le timer.
-	resizeGL indique qu’il faut dessiner sur toute la fenêtre et permet au shader du support VueOpenGL de s’effectuer sur la fenêtre GLWidget.
-	paintGL “nettoie” la fenêtre avant de faire quoi que ce soit sur celle-ci, puis dessine le système. Pour dessiner le système, cette méthode appelle la méthode de son système s.dessine_sur() et dessine sur la vue, notre support. C’est aussi ici que nous avons décidé de changer la position de la caméra si le booléen afficheCamera est activé.
-	keyPressEvent est une méthode qui regroupe l’ensemble des touches qui peuvent être utilisées pour modifier l’affichage graphique ou la simulation même du système, cette méthode est plus précisément abordée dans le document README.
-	timerEvent fixe le pas de temps de l’évolution du système (c’est ici que vitesse_simulation entre en jeu pour ralentir/accélérer la simulation) puis appelle la méthode du système evolue qui fait bouger les particules.
